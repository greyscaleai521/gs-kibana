# Docker file to set-up Greyscale's Kibana development environment

#
# ToDo:
#   1. Try to get the correct version of node by curling over to the git repository and getting the .nvmrc file. That would require
#      proper handling of secrets using buildkit. See notes in scrappad at the end of this file.
#   2. Handle GIT_TOKEN securely
#

#
# Usage:
#   0. Kibana source requires unix filesystem. 
#      a. Checkout gs-kibana on a WSL linux directory, or on your own linux system. 
#      b. When using WSL, make sure that your distro is linked to docker
#         desktop. Check Docker Desktop -> Settings -> Resources -> WSL Integration. 
#         This will allow you to run both docker containers in WSL and those on windows
#         powershell to be managed in an integrated way.
#      c. When using WSL, you can do 'code .' in gs-kibana directory to open the source
#         in vscode. The terminal will be a wsl terminal, and vscode will properly link
#         back into WSL, allowing you to have near-native linux development experience.
#
#   1. Get into your working unix filesystem folder and  clone using 
#       git clone https://${GIT_TOKEN}@github.com/greyscaleai521/gs-kibana.git
#      If already cloned out, you can do 'git pull' to get latest changes. If on windows,
#      make sure to run git commands from within a WSL shell.
#
#   2. Get into folder gs-kibana and check the user and group ID of the folder files using
#      'ls -ln' command. Note the <UID> and <GID> to be used in next step step when building
#       the docker image. This is important for getting right file system permission and
#       avoiding build failures.
#
#   3. Get into gs-dev folder. Build the image from this dockerfile tagging to gs-kibana:latest
#       docker build -f Dockerfile-gs.dev -t gs-kibana:latest --build-arg UID=<UID> GID=<GID> .
#
#   4. Run docker compose - ensure bind mount is uncommented docker compose file
#       docker-compose -f docker-compose-gs.dev.yml run --rm kibana
#
#   5. On the bash prompt, you can now continue with further development as per 
#      this document: https://www.elastic.co/guide/en/kibana/master/development-getting-started.html
#


FROM ubuntu:20.04 AS build


ARG UNAME=gsdev
# Check and set below (or pass as build-args) the user-id owning the kibana source files 
# on your linux/wsl system.
ARG UID=1000
ARG GID=1000
ARG NODE_VERSION=14.17.2
ARG CLONE_KIBANA=false
ARG GIT_TOKEN=provideasbuildargs

# Install development tools git, gcc, curl, python
RUN apt-get update && apt-get install -y \
        build-essential \
        curl \
        gcc \
        git \
        python3 \
        && rm -rf /var/lib/apt/lists/*       

# Create development user
RUN groupadd --gid $GID $UNAME && \
    useradd --no-log-init --create-home --gid $GID --uid $UID  --shell /bin/bash  $UNAME
USER $UNAME


# Clone and keep the Kibana repository inside the image. This downloaded repository inside the image
# can then be mounted on a named volume and copied out on host file system (docker cp). Source download increases the 
# image size. You have the benefit of having a local copy of the source code inside the image which can be extracted
# out without redownloading whole respository.
# If you already have kibana code cloned and ready to work on set CLONE_KIBANA to false and avoid this download
WORKDIR /gs-kibana-src
RUN if $CLONE_KIBANA ; then git clone https://${GIT_TOKEN}@github.com/greyscaleai521/kibana.git ; fi

# Install nvm, node and yarn for development user. You will have to do 'nvm use' again from inside bind mounted kibana source
# code folder to use them.
RUN curl --no-progress-meter -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.0/install.sh | bash
RUN bash -c "   . ~/.nvm/nvm.sh && \
                nvm install $NODE_VERSION \
            " 
RUN bash -c "   . ~/.nvm/nvm.sh && \
                nvm use $NODE_VERSION && \
                npm install -g yarn \
            " 

# Set-up work directory, and, volumes for gs-kibana bind-mount, and gs-kibana-src volume
WORKDIR /gs-kibana
VOLUME [ "/gs-kibana" ]
VOLUME [ "/gs-kibana-src" ]


##########################################
# Scrap pad - for later reference
##########################################

# To download the Kibana repository using github api in tgz format.

# RUN curl -# -H "Authorization: token ${GIT_TOKEN}" -L https://api.github.com/repos/greyscaleai521/kibana/tarball -o kibana.tgz && \
#     tar xzf kibana.tgz && \
#     mv $(ls | grep greyscaleai521-kibana*) kibana

# To get the node version from git repo:
# -- see bug, when GIT_TOKEN is incorrect, this creates problem rather than
# failing gracefully. Instead, use NODE_VERSION right now.
# RUN bash -c "   . /root/.nvm/nvm.sh && \
#                 nvm install $(curl -s -H \"Authorization: token ${GIT_TOKEN}\" https://raw.githubusercontent.com/greyscaleai521/kibana/gs-dev/.nvmrc) \
#             " 

# # For GID changes - which failed to fix errors on bind mounts from windows fileysystem
# # Copied from https://github.com/sudo-bmitch/jenkins-docker 

#     # switch to root, let the entrypoint drop back to gsdev
#     USER root

#     # install gosu for a better su+exec command -- used in gs-entrypoint
#     ARG GOSU_VERSION=1.10
#     RUN dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')" \
#     && curl -L -o /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch" \
#     && chmod +x /usr/local/bin/gosu \
#     && gosu nobody true 

#     # Add Tini -- used in gs-entrypoint
#     ENV TINI_VERSION v0.19.0
#     ADD https://github.com/krallin/tini/releases/download/${TINI_VERSION}/tini /tini
#     RUN chmod +x /tini

#     # gs-entrypoint provisions for group id of gsdev inside container match that on host.
#     COPY gs-entrypoint.sh /gs-entrypoint.sh
#     RUN chmod +x /gs-entrypoint.sh

# # Finished copy from https://github.com/sudo-bmitch/jenkins-docker
